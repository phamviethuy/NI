/*******************************************************************************
*
* Example program:
*   MultiFunctionSyncAIAO_DigStart
*
* Category:
*   Synchronization
*
* Description:
*   This example demonstrates how to continuously acquire and generate
*   synchronized analog input and output, with an external digital start
*   trigger.
*
* Instructions for running:
*   1.  Select the physical channels corresponding to where your signals are
*       input and output on the DAQ device.
*   2.  Enter the minimum and maximum voltage ranges.
*       Note: For better accuracy try to match the ranges to the expected
*       voltage level of the measured or generated signals.
*   3.  Set the number of samples to acquire per channel.
*   4.  Set the rate of the acquisition and generation.
*       Note: The rate should be at least twice as fast as the maximum frequency
*       component of the signal being acquired.
*   5.  Set the physical channel for the external digital trigger.  The default
*       is PFI0.
*   6.  Set the type, frequency, and amplitude of the wave to be generated.
*       Note: This example requires two DMA channels to run.  If your hardware
*       does not support two DMA channels, you need to set the
*       AOChannel.DataTransferMechanism property for the analog output task to
*       use interrupts.
*
* Steps:
*   1.  Create analog input and output voltage channels for measurement and
*       acquisition.
*   2.  Set timing parameters for continuous generation and acquisition.  The
*       sample rate and number of samples are set to the same values for each
*       task.
*   3.  Configure start triggers that will synchronize both tasks by triggering
*       the output task from the AI Start Trigger.
*   4.  Create the signal to be generated by the output task.
*   5.  Create an AnalogSingleChannelWriter and associate it with the output
*       task by using the task's stream.  Call
*       AnalogSingleChannelWriter.WriteMultiSample to write the data.
*   6.  Call Task.Start() on each task to start the acquisition and generation.
*       Note: The output task must start before the input task because it is
*       waiting on the input task for the start trigger.
*   7.  Create an AnalogSingleChannelReader and associate it with the input task
*       by using the task's stream. Call
*       AnalogSingleChannelReader.BeginReadWaveform to install a callback and
*       begin the asynchronous read operation.
*   8.  Inside the callback, call AnalogSingleChannelReader.EndReadWaveform
*       to retrieve the data from the read.
*   9.  Call AnalogSingleChannelReader.BeginReadWaveform again inside the
*       callback to perform another read.
*   10. Dispose the Task object to clean-up any resources associated with the
*       task.
*   11. Handle any DaqExceptions, if they occur.
*
* I/O Connections Overview:
*   Make sure your signal input terminals match the Physical Channel I/O
*   controls.
*
*******************************************************************************/

using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using NationalInstruments;
using NationalInstruments.DAQmx;
using NationalInstruments.Analysis.SignalGeneration;
using NationalInstruments.UI;

namespace NationalInstruments.Examples.SyncAIAOUsingDigTrigger
{
    /// <summary>
    /// Summary description for MainForm.
    /// </summary>
    public class MainForm : System.Windows.Forms.Form
    {
        private Task inputTask;
        private Task outputTask;
        private AnalogSingleChannelReader reader;
        private AnalogSingleChannelWriter writer;
        private AsyncCallback inputCallback;
        private AnalogWaveform<double> data;  

        private Task runningTask;
        private System.Windows.Forms.GroupBox timingGroupBox;
        private System.Windows.Forms.Label rateLabel;
        private System.Windows.Forms.Button startButton;
        private System.Windows.Forms.Button stopButton;
        private System.Windows.Forms.Label waveformTypeLabel;
        private System.Windows.Forms.Label amplitudeLabel;
        private System.Windows.Forms.GroupBox waveformGroupBox;
        private System.Windows.Forms.ComboBox waveformTypeComboBox;
        private System.Windows.Forms.Label triggerSourceLabel;
        private System.Windows.Forms.Label triggerEdgeLabel;
        private System.Windows.Forms.ComboBox inputChannelComboBox;
        private System.Windows.Forms.Label inputChanLabel;
        private System.Windows.Forms.Label inputMaxValLabel;
        private System.Windows.Forms.Label inputMinValLabel;
        private System.Windows.Forms.Label samplesLabel;
        private System.Windows.Forms.ComboBox outputChannelComboBox;
        private System.Windows.Forms.Label outputMaxValLabel;
        private System.Windows.Forms.Label outputMinValLabel;
        private System.Windows.Forms.Label outputChanLabel;
        private System.Windows.Forms.ComboBox triggerEdgeComboBox;
        private System.Windows.Forms.TextBox triggerSourceTextBox;
        private System.Windows.Forms.GroupBox inputChanGroupBox;
        private System.Windows.Forms.GroupBox outputChanGroupBox;
        private System.Windows.Forms.GroupBox triggerGroupBox;
        private System.Windows.Forms.Label frequencyLabel;
        private NationalInstruments.UI.XAxis xAxis1;
        private NationalInstruments.UI.YAxis yAxis1;
        private NationalInstruments.UI.WaveformPlot waveformPlot1;
        private NationalInstruments.UI.WindowsForms.WaveformGraph outputWaveformGraph;
        private NationalInstruments.UI.WindowsForms.WaveformGraph inputWaveformGraph;
        private NationalInstruments.UI.WaveformPlot waveformPlot2;
        private NationalInstruments.UI.XAxis xAxis2;
        private NationalInstruments.UI.YAxis yAxis2;
        private NationalInstruments.UI.WindowsForms.NumericEdit inputMinValueNumericEdit;
        private NationalInstruments.UI.WindowsForms.NumericEdit inputMaxValueNumericEdit;
        private NationalInstruments.UI.WindowsForms.NumericEdit numberOfSamplesNumericEdit;
        private NationalInstruments.UI.WindowsForms.NumericEdit sampleRateNumericEdit;
        private NationalInstruments.UI.WindowsForms.NumericEdit outputMinValueNumericEdit;
        private NationalInstruments.UI.WindowsForms.NumericEdit outputMaxValueNumericEdit;
        private NationalInstruments.UI.WindowsForms.NumericEdit amplitudeNumericEdit;
        private NationalInstruments.UI.WindowsForms.NumericEdit frequencyNumericEdit;
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.Container components = null;

        public MainForm()
        {
            //
            // Required for Windows Form Designer support
            //
            InitializeComponent();

            // Initialize UI
            inputChannelComboBox.Items.AddRange(DaqSystem.Local.GetPhysicalChannels(PhysicalChannelTypes.AI, PhysicalChannelAccess.External));
            outputChannelComboBox.Items.AddRange(DaqSystem.Local.GetPhysicalChannels(PhysicalChannelTypes.AO, PhysicalChannelAccess.External));

            waveformTypeComboBox.SelectedIndex = 0;
            triggerEdgeComboBox.SelectedIndex = 0;

        }

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        protected override void Dispose( bool disposing )
        {
            if( disposing )
            {
                if (components != null) 
                {
                    components.Dispose();
                }
                if (inputTask != null)
                {
                    runningTask = null;
                    inputTask.Dispose();
                }
                if (outputTask != null)
                {
                    outputTask.Dispose();
                }
            }
            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code
        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.Resources.ResourceManager resources = new System.Resources.ResourceManager(typeof(MainForm));
            this.inputChanGroupBox = new System.Windows.Forms.GroupBox();
            this.inputMinValueNumericEdit = new NationalInstruments.UI.WindowsForms.NumericEdit();
            this.inputMaxValueNumericEdit = new NationalInstruments.UI.WindowsForms.NumericEdit();
            this.inputChannelComboBox = new System.Windows.Forms.ComboBox();
            this.inputChanLabel = new System.Windows.Forms.Label();
            this.inputMaxValLabel = new System.Windows.Forms.Label();
            this.inputMinValLabel = new System.Windows.Forms.Label();
            this.timingGroupBox = new System.Windows.Forms.GroupBox();
            this.numberOfSamplesNumericEdit = new NationalInstruments.UI.WindowsForms.NumericEdit();
            this.sampleRateNumericEdit = new NationalInstruments.UI.WindowsForms.NumericEdit();
            this.samplesLabel = new System.Windows.Forms.Label();
            this.rateLabel = new System.Windows.Forms.Label();
            this.frequencyLabel = new System.Windows.Forms.Label();
            this.startButton = new System.Windows.Forms.Button();
            this.outputChanGroupBox = new System.Windows.Forms.GroupBox();
            this.outputMinValueNumericEdit = new NationalInstruments.UI.WindowsForms.NumericEdit();
            this.outputMaxValueNumericEdit = new NationalInstruments.UI.WindowsForms.NumericEdit();
            this.outputChannelComboBox = new System.Windows.Forms.ComboBox();
            this.outputMaxValLabel = new System.Windows.Forms.Label();
            this.outputMinValLabel = new System.Windows.Forms.Label();
            this.outputChanLabel = new System.Windows.Forms.Label();
            this.stopButton = new System.Windows.Forms.Button();
            this.waveformGroupBox = new System.Windows.Forms.GroupBox();
            this.amplitudeNumericEdit = new NationalInstruments.UI.WindowsForms.NumericEdit();
            this.frequencyNumericEdit = new NationalInstruments.UI.WindowsForms.NumericEdit();
            this.waveformTypeComboBox = new System.Windows.Forms.ComboBox();
            this.waveformTypeLabel = new System.Windows.Forms.Label();
            this.amplitudeLabel = new System.Windows.Forms.Label();
            this.triggerSourceLabel = new System.Windows.Forms.Label();
            this.triggerEdgeLabel = new System.Windows.Forms.Label();
            this.triggerEdgeComboBox = new System.Windows.Forms.ComboBox();
            this.triggerSourceTextBox = new System.Windows.Forms.TextBox();
            this.triggerGroupBox = new System.Windows.Forms.GroupBox();
            this.outputWaveformGraph = new NationalInstruments.UI.WindowsForms.WaveformGraph();
            this.waveformPlot1 = new NationalInstruments.UI.WaveformPlot();
            this.xAxis1 = new NationalInstruments.UI.XAxis();
            this.yAxis1 = new NationalInstruments.UI.YAxis();
            this.inputWaveformGraph = new NationalInstruments.UI.WindowsForms.WaveformGraph();
            this.waveformPlot2 = new NationalInstruments.UI.WaveformPlot();
            this.xAxis2 = new NationalInstruments.UI.XAxis();
            this.yAxis2 = new NationalInstruments.UI.YAxis();
            this.inputChanGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.inputMinValueNumericEdit)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.inputMaxValueNumericEdit)).BeginInit();
            this.timingGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.numberOfSamplesNumericEdit)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.sampleRateNumericEdit)).BeginInit();
            this.outputChanGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.outputMinValueNumericEdit)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.outputMaxValueNumericEdit)).BeginInit();
            this.waveformGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.amplitudeNumericEdit)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.frequencyNumericEdit)).BeginInit();
            this.triggerGroupBox.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.outputWaveformGraph)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.inputWaveformGraph)).BeginInit();
            this.SuspendLayout();
            // 
            // inputChanGroupBox
            // 
            this.inputChanGroupBox.Controls.Add(this.inputMinValueNumericEdit);
            this.inputChanGroupBox.Controls.Add(this.inputMaxValueNumericEdit);
            this.inputChanGroupBox.Controls.Add(this.inputChannelComboBox);
            this.inputChanGroupBox.Controls.Add(this.inputChanLabel);
            this.inputChanGroupBox.Controls.Add(this.inputMaxValLabel);
            this.inputChanGroupBox.Controls.Add(this.inputMinValLabel);
            this.inputChanGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputChanGroupBox.Location = new System.Drawing.Point(8, 8);
            this.inputChanGroupBox.Name = "inputChanGroupBox";
            this.inputChanGroupBox.Size = new System.Drawing.Size(280, 112);
            this.inputChanGroupBox.TabIndex = 2;
            this.inputChanGroupBox.TabStop = false;
            this.inputChanGroupBox.Text = "Channel Parameters - Input";
            // 
            // inputMinValueNumericEdit
            // 
            this.inputMinValueNumericEdit.Location = new System.Drawing.Point(152, 79);
            this.inputMinValueNumericEdit.Name = "inputMinValueNumericEdit";
            this.inputMinValueNumericEdit.OutOfRangeMode = NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange;
            this.inputMinValueNumericEdit.Range = new NationalInstruments.UI.Range(-10, 0);
            this.inputMinValueNumericEdit.Size = new System.Drawing.Size(112, 20);
            this.inputMinValueNumericEdit.TabIndex = 2;
            this.inputMinValueNumericEdit.Value = -10;
            // 
            // inputMaxValueNumericEdit
            // 
            this.inputMaxValueNumericEdit.Location = new System.Drawing.Point(152, 52);
            this.inputMaxValueNumericEdit.Name = "inputMaxValueNumericEdit";
            this.inputMaxValueNumericEdit.OutOfRangeMode = NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange;
            this.inputMaxValueNumericEdit.Range = new NationalInstruments.UI.Range(0, 10);
            this.inputMaxValueNumericEdit.Size = new System.Drawing.Size(112, 20);
            this.inputMaxValueNumericEdit.TabIndex = 1;
            this.inputMaxValueNumericEdit.Value = 10;
            // 
            // inputChannelComboBox
            // 
            this.inputChannelComboBox.Location = new System.Drawing.Point(152, 24);
            this.inputChannelComboBox.Name = "inputChannelComboBox";
            this.inputChannelComboBox.Size = new System.Drawing.Size(112, 21);
            this.inputChannelComboBox.TabIndex = 0;
            this.inputChannelComboBox.Text = "Dev1/ai0";
            // 
            // inputChanLabel
            // 
            this.inputChanLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputChanLabel.Location = new System.Drawing.Point(16, 26);
            this.inputChanLabel.Name = "inputChanLabel";
            this.inputChanLabel.Size = new System.Drawing.Size(96, 16);
            this.inputChanLabel.TabIndex = 0;
            this.inputChanLabel.Text = "Input Channel:";
            // 
            // inputMaxValLabel
            // 
            this.inputMaxValLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputMaxValLabel.Location = new System.Drawing.Point(16, 54);
            this.inputMaxValLabel.Name = "inputMaxValLabel";
            this.inputMaxValLabel.Size = new System.Drawing.Size(96, 16);
            this.inputMaxValLabel.TabIndex = 2;
            this.inputMaxValLabel.Text = "Maximum Value:";
            // 
            // inputMinValLabel
            // 
            this.inputMinValLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.inputMinValLabel.Location = new System.Drawing.Point(16, 82);
            this.inputMinValLabel.Name = "inputMinValLabel";
            this.inputMinValLabel.Size = new System.Drawing.Size(96, 16);
            this.inputMinValLabel.TabIndex = 4;
            this.inputMinValLabel.Text = "Minimum Value:";
            // 
            // timingGroupBox
            // 
            this.timingGroupBox.Controls.Add(this.numberOfSamplesNumericEdit);
            this.timingGroupBox.Controls.Add(this.sampleRateNumericEdit);
            this.timingGroupBox.Controls.Add(this.samplesLabel);
            this.timingGroupBox.Controls.Add(this.rateLabel);
            this.timingGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.timingGroupBox.Location = new System.Drawing.Point(8, 248);
            this.timingGroupBox.Name = "timingGroupBox";
            this.timingGroupBox.Size = new System.Drawing.Size(280, 88);
            this.timingGroupBox.TabIndex = 4;
            this.timingGroupBox.TabStop = false;
            this.timingGroupBox.Text = "Timing Parameters";
            // 
            // numberOfSamplesNumericEdit
            // 
            this.numberOfSamplesNumericEdit.Location = new System.Drawing.Point(152, 48);
            this.numberOfSamplesNumericEdit.Name = "numberOfSamplesNumericEdit";
            this.numberOfSamplesNumericEdit.OutOfRangeMode = NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange;
            this.numberOfSamplesNumericEdit.Range = new NationalInstruments.UI.Range(1, 100000);
            this.numberOfSamplesNumericEdit.Size = new System.Drawing.Size(112, 20);
            this.numberOfSamplesNumericEdit.TabIndex = 1;
            this.numberOfSamplesNumericEdit.Value = 1000;
            // 
            // sampleRateNumericEdit
            // 
            this.sampleRateNumericEdit.Location = new System.Drawing.Point(152, 21);
            this.sampleRateNumericEdit.Name = "sampleRateNumericEdit";
            this.sampleRateNumericEdit.OutOfRangeMode = NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange;
            this.sampleRateNumericEdit.Range = new NationalInstruments.UI.Range(0, 100000);
            this.sampleRateNumericEdit.Size = new System.Drawing.Size(112, 20);
            this.sampleRateNumericEdit.TabIndex = 0;
            this.sampleRateNumericEdit.Value = 1000;
            // 
            // samplesLabel
            // 
            this.samplesLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.samplesLabel.Location = new System.Drawing.Point(16, 51);
            this.samplesLabel.Name = "samplesLabel";
            this.samplesLabel.Size = new System.Drawing.Size(120, 15);
            this.samplesLabel.TabIndex = 4;
            this.samplesLabel.Text = "Number Of Samples:";
            // 
            // rateLabel
            // 
            this.rateLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.rateLabel.Location = new System.Drawing.Point(16, 23);
            this.rateLabel.Name = "rateLabel";
            this.rateLabel.Size = new System.Drawing.Size(96, 16);
            this.rateLabel.TabIndex = 0;
            this.rateLabel.Text = "Sample Rate (Hz):";
            // 
            // frequencyLabel
            // 
            this.frequencyLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.frequencyLabel.Location = new System.Drawing.Point(16, 54);
            this.frequencyLabel.Name = "frequencyLabel";
            this.frequencyLabel.Size = new System.Drawing.Size(120, 16);
            this.frequencyLabel.TabIndex = 2;
            this.frequencyLabel.Text = "Frequency  (Hz):";
            // 
            // startButton
            // 
            this.startButton.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.startButton.Location = new System.Drawing.Point(400, 496);
            this.startButton.Name = "startButton";
            this.startButton.Size = new System.Drawing.Size(88, 32);
            this.startButton.TabIndex = 0;
            this.startButton.Text = "Start";
            this.startButton.Click += new System.EventHandler(this.startButton_Click);
            // 
            // outputChanGroupBox
            // 
            this.outputChanGroupBox.Controls.Add(this.outputMinValueNumericEdit);
            this.outputChanGroupBox.Controls.Add(this.outputMaxValueNumericEdit);
            this.outputChanGroupBox.Controls.Add(this.outputChannelComboBox);
            this.outputChanGroupBox.Controls.Add(this.outputMaxValLabel);
            this.outputChanGroupBox.Controls.Add(this.outputMinValLabel);
            this.outputChanGroupBox.Controls.Add(this.outputChanLabel);
            this.outputChanGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.outputChanGroupBox.Location = new System.Drawing.Point(8, 128);
            this.outputChanGroupBox.Name = "outputChanGroupBox";
            this.outputChanGroupBox.Size = new System.Drawing.Size(280, 112);
            this.outputChanGroupBox.TabIndex = 3;
            this.outputChanGroupBox.TabStop = false;
            this.outputChanGroupBox.Text = "Channel Parameters - Output";
            // 
            // outputMinValueNumericEdit
            // 
            this.outputMinValueNumericEdit.Location = new System.Drawing.Point(152, 79);
            this.outputMinValueNumericEdit.Name = "outputMinValueNumericEdit";
            this.outputMinValueNumericEdit.OutOfRangeMode = NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange;
            this.outputMinValueNumericEdit.Range = new NationalInstruments.UI.Range(-10, 0);
            this.outputMinValueNumericEdit.Size = new System.Drawing.Size(112, 20);
            this.outputMinValueNumericEdit.TabIndex = 2;
            this.outputMinValueNumericEdit.Value = -10;
            // 
            // outputMaxValueNumericEdit
            // 
            this.outputMaxValueNumericEdit.Location = new System.Drawing.Point(152, 52);
            this.outputMaxValueNumericEdit.Name = "outputMaxValueNumericEdit";
            this.outputMaxValueNumericEdit.OutOfRangeMode = NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange;
            this.outputMaxValueNumericEdit.Range = new NationalInstruments.UI.Range(0, 10);
            this.outputMaxValueNumericEdit.Size = new System.Drawing.Size(112, 20);
            this.outputMaxValueNumericEdit.TabIndex = 1;
            this.outputMaxValueNumericEdit.Value = 10;
            // 
            // outputChannelComboBox
            // 
            this.outputChannelComboBox.Location = new System.Drawing.Point(152, 24);
            this.outputChannelComboBox.Name = "outputChannelComboBox";
            this.outputChannelComboBox.Size = new System.Drawing.Size(112, 21);
            this.outputChannelComboBox.TabIndex = 0;
            this.outputChannelComboBox.Text = "Dev1/ao0";
            // 
            // outputMaxValLabel
            // 
            this.outputMaxValLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.outputMaxValLabel.Location = new System.Drawing.Point(16, 54);
            this.outputMaxValLabel.Name = "outputMaxValLabel";
            this.outputMaxValLabel.Size = new System.Drawing.Size(96, 16);
            this.outputMaxValLabel.TabIndex = 2;
            this.outputMaxValLabel.Text = "Maximum Value:";
            // 
            // outputMinValLabel
            // 
            this.outputMinValLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.outputMinValLabel.Location = new System.Drawing.Point(16, 81);
            this.outputMinValLabel.Name = "outputMinValLabel";
            this.outputMinValLabel.Size = new System.Drawing.Size(96, 16);
            this.outputMinValLabel.TabIndex = 4;
            this.outputMinValLabel.Text = "Minimum Value:";
            // 
            // outputChanLabel
            // 
            this.outputChanLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.outputChanLabel.Location = new System.Drawing.Point(16, 26);
            this.outputChanLabel.Name = "outputChanLabel";
            this.outputChanLabel.Size = new System.Drawing.Size(96, 16);
            this.outputChanLabel.TabIndex = 0;
            this.outputChanLabel.Text = "Output Channel:";
            // 
            // stopButton
            // 
            this.stopButton.Enabled = false;
            this.stopButton.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.stopButton.Location = new System.Drawing.Point(536, 496);
            this.stopButton.Name = "stopButton";
            this.stopButton.Size = new System.Drawing.Size(88, 32);
            this.stopButton.TabIndex = 1;
            this.stopButton.Text = "Stop";
            this.stopButton.Click += new System.EventHandler(this.stopButton_Click);
            // 
            // waveformGroupBox
            // 
            this.waveformGroupBox.Controls.Add(this.amplitudeNumericEdit);
            this.waveformGroupBox.Controls.Add(this.frequencyNumericEdit);
            this.waveformGroupBox.Controls.Add(this.waveformTypeComboBox);
            this.waveformGroupBox.Controls.Add(this.waveformTypeLabel);
            this.waveformGroupBox.Controls.Add(this.amplitudeLabel);
            this.waveformGroupBox.Controls.Add(this.frequencyLabel);
            this.waveformGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.waveformGroupBox.Location = new System.Drawing.Point(8, 432);
            this.waveformGroupBox.Name = "waveformGroupBox";
            this.waveformGroupBox.Size = new System.Drawing.Size(280, 112);
            this.waveformGroupBox.TabIndex = 6;
            this.waveformGroupBox.TabStop = false;
            this.waveformGroupBox.Text = "Waveform Parameters";
            // 
            // amplitudeNumericEdit
            // 
            this.amplitudeNumericEdit.Location = new System.Drawing.Point(152, 79);
            this.amplitudeNumericEdit.Name = "amplitudeNumericEdit";
            this.amplitudeNumericEdit.OutOfRangeMode = NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange;
            this.amplitudeNumericEdit.Range = new NationalInstruments.UI.Range(-10, 10);
            this.amplitudeNumericEdit.Size = new System.Drawing.Size(112, 20);
            this.amplitudeNumericEdit.TabIndex = 3;
            this.amplitudeNumericEdit.Value = 1;
            // 
            // frequencyNumericEdit
            // 
            this.frequencyNumericEdit.Location = new System.Drawing.Point(152, 52);
            this.frequencyNumericEdit.Name = "frequencyNumericEdit";
            this.frequencyNumericEdit.OutOfRangeMode = NationalInstruments.UI.NumericOutOfRangeMode.CoerceToRange;
            this.frequencyNumericEdit.Range = new NationalInstruments.UI.Range(0, 100000);
            this.frequencyNumericEdit.Size = new System.Drawing.Size(112, 20);
            this.frequencyNumericEdit.TabIndex = 2;
            this.frequencyNumericEdit.Value = 10;
            // 
            // waveformTypeComboBox
            // 
            this.waveformTypeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.waveformTypeComboBox.Items.AddRange(new object[] {
            "Sine Wave",
            "Square Wave",
            "Triangle Wave",
            "Sawtooth Wave"});
            this.waveformTypeComboBox.Location = new System.Drawing.Point(152, 24);
            this.waveformTypeComboBox.Name = "waveformTypeComboBox";
            this.waveformTypeComboBox.Size = new System.Drawing.Size(112, 21);
            this.waveformTypeComboBox.TabIndex = 0;
            // 
            // waveformTypeLabel
            // 
            this.waveformTypeLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.waveformTypeLabel.Location = new System.Drawing.Point(16, 26);
            this.waveformTypeLabel.Name = "waveformTypeLabel";
            this.waveformTypeLabel.Size = new System.Drawing.Size(96, 16);
            this.waveformTypeLabel.TabIndex = 0;
            this.waveformTypeLabel.Text = "Waveform Type:";
            // 
            // amplitudeLabel
            // 
            this.amplitudeLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.amplitudeLabel.Location = new System.Drawing.Point(16, 81);
            this.amplitudeLabel.Name = "amplitudeLabel";
            this.amplitudeLabel.Size = new System.Drawing.Size(96, 16);
            this.amplitudeLabel.TabIndex = 2;
            this.amplitudeLabel.Text = "Amplitude:";
            // 
            // triggerSourceLabel
            // 
            this.triggerSourceLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.triggerSourceLabel.Location = new System.Drawing.Point(16, 26);
            this.triggerSourceLabel.Name = "triggerSourceLabel";
            this.triggerSourceLabel.Size = new System.Drawing.Size(120, 16);
            this.triggerSourceLabel.TabIndex = 0;
            this.triggerSourceLabel.Text = "Digital Trigger Source:";
            // 
            // triggerEdgeLabel
            // 
            this.triggerEdgeLabel.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.triggerEdgeLabel.Location = new System.Drawing.Point(16, 54);
            this.triggerEdgeLabel.Name = "triggerEdgeLabel";
            this.triggerEdgeLabel.Size = new System.Drawing.Size(96, 16);
            this.triggerEdgeLabel.TabIndex = 2;
            this.triggerEdgeLabel.Text = "Trigger Edge:";
            // 
            // triggerEdgeComboBox
            // 
            this.triggerEdgeComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.triggerEdgeComboBox.Items.AddRange(new object[] {
            "Rising",
            "Falling"});
            this.triggerEdgeComboBox.Location = new System.Drawing.Point(152, 52);
            this.triggerEdgeComboBox.Name = "triggerEdgeComboBox";
            this.triggerEdgeComboBox.Size = new System.Drawing.Size(112, 21);
            this.triggerEdgeComboBox.TabIndex = 1;
            // 
            // triggerSourceTextBox
            // 
            this.triggerSourceTextBox.Location = new System.Drawing.Point(152, 24);
            this.triggerSourceTextBox.Name = "triggerSourceTextBox";
            this.triggerSourceTextBox.Size = new System.Drawing.Size(112, 20);
            this.triggerSourceTextBox.TabIndex = 0;
            this.triggerSourceTextBox.Text = "/Dev1/PFI0";
            // 
            // triggerGroupBox
            // 
            this.triggerGroupBox.Controls.Add(this.triggerEdgeLabel);
            this.triggerGroupBox.Controls.Add(this.triggerSourceTextBox);
            this.triggerGroupBox.Controls.Add(this.triggerSourceLabel);
            this.triggerGroupBox.Controls.Add(this.triggerEdgeComboBox);
            this.triggerGroupBox.FlatStyle = System.Windows.Forms.FlatStyle.System;
            this.triggerGroupBox.Location = new System.Drawing.Point(8, 344);
            this.triggerGroupBox.Name = "triggerGroupBox";
            this.triggerGroupBox.Size = new System.Drawing.Size(280, 80);
            this.triggerGroupBox.TabIndex = 5;
            this.triggerGroupBox.TabStop = false;
            this.triggerGroupBox.Text = "Trigger Parameters";
            // 
            // outputWaveformGraph
            // 
            this.outputWaveformGraph.Caption = "Generated Waveform";
            this.outputWaveformGraph.Location = new System.Drawing.Point(320, 24);
            this.outputWaveformGraph.Name = "outputWaveformGraph";
            this.outputWaveformGraph.Plots.AddRange(new NationalInstruments.UI.WaveformPlot[] {
            this.waveformPlot1});
            this.outputWaveformGraph.Size = new System.Drawing.Size(392, 224);
            this.outputWaveformGraph.TabIndex = 7;
            this.outputWaveformGraph.TabStop = false;
            this.outputWaveformGraph.XAxes.AddRange(new NationalInstruments.UI.XAxis[] {
            this.xAxis1});
            this.outputWaveformGraph.YAxes.AddRange(new NationalInstruments.UI.YAxis[] {
            this.yAxis1});
            // 
            // waveformPlot1
            // 
            this.waveformPlot1.XAxis = this.xAxis1;
            this.waveformPlot1.YAxis = this.yAxis1;
            // 
            // xAxis1
            // 
            this.xAxis1.Caption = "Number Of Samples";
            // 
            // yAxis1
            // 
            this.yAxis1.Caption = "Amplitude";
            this.yAxis1.Mode = NationalInstruments.UI.AxisMode.AutoScaleExact;
            // 
            // inputWaveformGraph
            // 
            this.inputWaveformGraph.Caption = "Waveform On Input Channel";
            this.inputWaveformGraph.Location = new System.Drawing.Point(320, 264);
            this.inputWaveformGraph.Name = "inputWaveformGraph";
            this.inputWaveformGraph.Plots.AddRange(new NationalInstruments.UI.WaveformPlot[] {
            this.waveformPlot2});
            this.inputWaveformGraph.Size = new System.Drawing.Size(392, 224);
            this.inputWaveformGraph.TabIndex = 7;
            this.inputWaveformGraph.TabStop = false;
            this.inputWaveformGraph.XAxes.AddRange(new NationalInstruments.UI.XAxis[] {
            this.xAxis2});
            this.inputWaveformGraph.YAxes.AddRange(new NationalInstruments.UI.YAxis[] {
            this.yAxis2});
            // 
            // waveformPlot2
            // 
            this.waveformPlot2.XAxis = this.xAxis2;
            this.waveformPlot2.YAxis = this.yAxis2;
            // 
            // xAxis2
            // 
            this.xAxis2.Caption = "Number Of Samples";
            // 
            // yAxis2
            // 
            this.yAxis2.Caption = "Amplitude";
            this.yAxis2.Mode = NationalInstruments.UI.AxisMode.AutoScaleExact;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(96F, 96F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Dpi;
            this.ClientSize = new System.Drawing.Size(722, 552);
            this.Controls.Add(this.outputWaveformGraph);
            this.Controls.Add(this.startButton);
            this.Controls.Add(this.timingGroupBox);
            this.Controls.Add(this.outputChanGroupBox);
            this.Controls.Add(this.stopButton);
            this.Controls.Add(this.waveformGroupBox);
            this.Controls.Add(this.triggerGroupBox);
            this.Controls.Add(this.inputChanGroupBox);
            this.Controls.Add(this.inputWaveformGraph);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
            this.MaximizeBox = false;
            this.Name = "MainForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "Synchronize AI and AO using a Digital Trigger";
            this.inputChanGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.inputMinValueNumericEdit)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.inputMaxValueNumericEdit)).EndInit();
            this.timingGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.numberOfSamplesNumericEdit)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.sampleRateNumericEdit)).EndInit();
            this.outputChanGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.outputMinValueNumericEdit)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.outputMaxValueNumericEdit)).EndInit();
            this.waveformGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.amplitudeNumericEdit)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.frequencyNumericEdit)).EndInit();
            this.triggerGroupBox.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.outputWaveformGraph)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.inputWaveformGraph)).EndInit();
            this.ResumeLayout(false);

        }
        #endregion

        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main() 
        {
            Application.EnableVisualStyles();
            Application.DoEvents();
            Application.Run(new MainForm());
        }

        private void startButton_Click(object sender, System.EventArgs e)
        {
            // Change the mouse to an hourglass for the duration of this function.
            System.Windows.Forms.Cursor.Current = System.Windows.Forms.Cursors.WaitCursor;

            #region UI code
            inputWaveformGraph.ClearData();
                
            // Read UI selections
            DigitalEdgeStartTriggerEdge triggerEdge;
            if (triggerEdgeComboBox.SelectedIndex == 0)
                triggerEdge = DigitalEdgeStartTriggerEdge.Rising;
            else
                triggerEdge = DigitalEdgeStartTriggerEdge.Falling;

            SignalGenerator fgen;
            switch (waveformTypeComboBox.SelectedIndex)
            {
                case 0:
                    fgen = new SignalGenerator(sampleRateNumericEdit.Value , Convert.ToInt32(numberOfSamplesNumericEdit.Value),
                        new SineSignal(frequencyNumericEdit.Value, amplitudeNumericEdit.Value));
                    break;
                case 1:
                    fgen = new SignalGenerator(sampleRateNumericEdit.Value , Convert.ToInt32(numberOfSamplesNumericEdit.Value),
                        new SquareSignal(frequencyNumericEdit.Value, amplitudeNumericEdit.Value));
                    break;
                case 2:
                    fgen = new SignalGenerator(sampleRateNumericEdit.Value , Convert.ToInt32(numberOfSamplesNumericEdit.Value),
                        new TriangleSignal(frequencyNumericEdit.Value, amplitudeNumericEdit.Value));
                    break;
                case 3:
                    fgen = new SignalGenerator(sampleRateNumericEdit.Value , Convert.ToInt32(numberOfSamplesNumericEdit.Value),
                        new SawtoothSignal(frequencyNumericEdit.Value, amplitudeNumericEdit.Value));
                    break;
                default:
                    fgen = new SignalGenerator(sampleRateNumericEdit.Value , Convert.ToInt32(numberOfSamplesNumericEdit.Value),
                        new SineSignal(frequencyNumericEdit.Value, amplitudeNumericEdit.Value));
                    break;
            }
            #endregion

            #region Data Acquisition Code
            try
            {
                // Create the input and output tasks
                inputTask = new Task("inputTask");
                outputTask = new Task("outputTask");

                // Configure both tasks with the values selected on the UI.
                inputTask.AIChannels.CreateVoltageChannel(inputChannelComboBox.Text, "", AITerminalConfiguration.Differential,
                    inputMinValueNumericEdit.Value, inputMaxValueNumericEdit.Value,
                    AIVoltageUnits.Volts);

                outputTask.AOChannels.CreateVoltageChannel(outputChannelComboBox.Text, "",
                    outputMinValueNumericEdit.Value, outputMaxValueNumericEdit.Value, AOVoltageUnits.Volts);

                // Set up the timing
                inputTask.Timing.ConfigureSampleClock("",sampleRateNumericEdit.Value,
                    SampleClockActiveEdge.Rising,SampleQuantityMode.ContinuousSamples,
                    Convert.ToInt32(numberOfSamplesNumericEdit.Value));

                outputTask.Timing.ConfigureSampleClock("",sampleRateNumericEdit.Value,
                    SampleClockActiveEdge.Rising, SampleQuantityMode.ContinuousSamples,
                    Convert.ToInt32(numberOfSamplesNumericEdit.Value));

                // Set up the start trigger for the input task
                inputTask.Triggers.StartTrigger.ConfigureDigitalEdgeTrigger(triggerSourceTextBox.Text,
                    triggerEdge);

                // Set up "Dev1/ai/startTrigger" as the trigger source for the output task
                string deviceName = inputChannelComboBox.Text.Split('/')[0];
                string terminalNameBase = "/" + deviceName + "/";
                outputTask.Triggers.StartTrigger.ConfigureDigitalEdgeTrigger(terminalNameBase + "ai/StartTrigger",
                    triggerEdge);

                // Verify the tasks
                inputTask.Control(TaskAction.Verify);
                outputTask.Control(TaskAction.Verify);

                // Write data to the output channel
                writer = new AnalogSingleChannelWriter(outputTask.Stream);
                double[] outData = fgen.Generate();
                writer.WriteMultiSample(false, outData);
                outputWaveformGraph.PlotY(outData);

                // Start the tasks and disable the UI
                StartTasks(); 

                // Start reading as well
                inputCallback = new AsyncCallback(InputRead);
                reader = new AnalogSingleChannelReader(inputTask.Stream);

                reader.SynchronizeCallbacks = true;
                reader.BeginReadWaveform(Convert.ToInt32(numberOfSamplesNumericEdit.Value), inputCallback, inputTask);
            }
            catch (Exception ex)
            {
                // Stop the tasks and enable the UI
                StopTask();
                MessageBox.Show(ex.Message);
            }
            #endregion
        }

        // This callback is invoked everytime a Read completes
        private void InputRead(IAsyncResult ar)
        {
            try
            {
                if (runningTask != null && runningTask == ar.AsyncState)
                {
                    // Read the data
                    data = reader.EndReadWaveform(ar);
                    inputWaveformGraph.PlotWaveformAppend(data);

                    // Set up next callback
                    reader.BeginMemoryOptimizedReadWaveform(Convert.ToInt32(numberOfSamplesNumericEdit.Value), inputCallback, inputTask, data);
                }
            }
            catch (Exception ex)
            {
                StopTask();
                MessageBox.Show(ex.Message);
            }
        }

        private void stopButton_Click(object sender, System.EventArgs e)
        {
            StopTask();
        }

        private void StartTasks()
        {
            if (runningTask == null)
            {
                // Change state
                runningTask = inputTask;

                #region Disable UI
                // Fix UI
                inputChannelComboBox.Enabled = false;
                inputMinValueNumericEdit.Enabled = false;
                inputMaxValueNumericEdit.Enabled = false;
            
                outputChannelComboBox.Enabled = false;
                outputChannelComboBox.Enabled = false;
                outputChannelComboBox.Enabled = false;
                outputMaxValueNumericEdit.Enabled = false;
                outputMinValueNumericEdit.Enabled = false;

                sampleRateNumericEdit.Enabled = false;
                frequencyNumericEdit.Enabled = false;
                numberOfSamplesNumericEdit.Enabled = false;
            
                waveformTypeComboBox.Enabled = false;
                amplitudeNumericEdit.Enabled = false;
                triggerSourceTextBox.Enabled = false;
                triggerEdgeComboBox.Enabled = false;

                startButton.Enabled = false;
                stopButton.Enabled = true;
                #endregion

                outputTask.Start();
                inputTask.Start();
            }
        }

        private void StopTask()
        {
            // Change state
            runningTask = null;

            #region Enable UI
            inputChannelComboBox.Enabled = true;
            inputMinValueNumericEdit.Enabled = true;
            inputMaxValueNumericEdit.Enabled = true;
            
            outputChannelComboBox.Enabled = true;
            outputChannelComboBox.Enabled = true;
            outputChannelComboBox.Enabled = true;
            outputMaxValueNumericEdit.Enabled = true;
            outputMinValueNumericEdit.Enabled = true;

            sampleRateNumericEdit.Enabled = true;
            frequencyNumericEdit.Enabled = true;
            numberOfSamplesNumericEdit.Enabled = true;
            
            waveformTypeComboBox.Enabled = true;
            amplitudeNumericEdit.Enabled = true;
            triggerSourceTextBox.Enabled = true;
            triggerEdgeComboBox.Enabled = true;
            #endregion

            startButton.Enabled = true;
            stopButton.Enabled = false;
        
            // Stop tasks
            inputTask.Stop();
            outputTask.Stop();

            inputTask.Dispose();
            outputTask.Dispose();
        }

    }
}
